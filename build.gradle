apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'pl.allegro.tech.build.axion-release'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("pl.allegro.tech.build:axion-release-plugin:${axionReleasePluginVersion}")
    }
}

scmVersion {
    tag {
        prefix = 'RELEASE'
    }
}

group = 'uk.co.caeldev'
version = scmVersion.version

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

jar {
    archivesBaseName = rootProject.name
    group = group
    version = version
    manifest {
        attributes 'Implementation-Title': 'Spring Morphia',
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

bootRepackage {
    enabled = false
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
    required = { gradle.taskGraph.hasTask("uploadArchives") && !version.endsWith("SNAPSHOT") }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: "${System.env.ossrhUsername}", password: "${System.env.ossrhPassword}")
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: "${System.env.ossrhUsername}", password: "${System.env.ossrhPassword}")
            }

            //repository(url: "/Users/me/.m2/repository")

            pom.project {

                parent {
                  groupId 'org.springframework.boot'
                  artifactId 'spring-boot-starter-parent'
                  version "${springBootVersion}"
                }

                name 'Spring Morphia'
                packaging "jar"

                description "A Commons Library to provide moprhia configuration"
                url "https://github.com/caelwinner/spring-morphia"

                scm {
                    url "https://github.com/caelwinner/spring-morphia.git"
                    connection "https://github.com/caelwinner/spring-morphia.git"
                    developerConnection "https://github.com/caelwinner/spring-morphia.git"
                }

                licenses {
                    license {
                        name "MIT"
                        url "http://opensource.org/licenses/MIT"
                        distribution "repo"
                    }
                }

                developers {
                    developer {
                        id "caelwinner"
                        name "Adolfo Custidiano"
                        email "adolfoecs@gmail.com"
                    }
                }
            }
        }
    }
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.data:spring-data-commons")
    compile("com.google.guava:guava:${guavaVersion}")
    compile("org.mongodb.morphia:morphia:${morphiaVersion}")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.assertj:assertj-core:${assertjCoreVersion}")
    testCompile("uk.org.fyodor:fyodor-core:${fyodorVersion}")
    testCompile("uk.org.fyodor:fyodor-junit:${fyodorVersion}")
    testCompile("com.github.fakemongo:fongo:${fongoVersion}")
}

task wrapper(type: Wrapper) {
    gradleVersion = rootGradleVersion
}
